#!/usr/bin/env python3
"""
Extract Thoi Gian Bao Hanh - NEW Simple Text Extractor
Extracts 'thoi_gian_bao_hanh' (warranty period) from CHUONG_III.pdf
"""

import os
import json
from pathlib import Path
import openai
import PyPDF2
from dotenv import load_dotenv
from datetime import datetime

class ThoiGianBaoHanhExtractor:
    def __init__(self):
        """Initialize the extractor with batch-based folder structure"""
        # Set working directory to script's parent (BID_PROCESSOR)
        self.base_dir = Path(__file__).parent.parent
        os.chdir(self.base_dir)
        
        # Load environment variables
        load_dotenv()
        
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            raise ValueError("‚ùå OPENAI_API_KEY not found in .env file!")
        
        openai.api_key = self.openai_api_key
        
        # Read current batch ID
        self.batch_id = self.read_batch_id()
        if not self.batch_id:
            raise ValueError("‚ùå No current batch ID found!")
        
        # Set up paths
        self.batch_dir = self.base_dir / self.batch_id
        self.pdfs_dir = self.batch_dir / "pdfs"
        self.extracted_dir = self.batch_dir / "extracted_data"
        
        # Ensure directories exist
        self.extracted_dir.mkdir(exist_ok=True)
        
        print(f"üéØ ThoiGianBaoHanhExtractor initialized for batch: {self.batch_id}")

    def read_batch_id(self):
        """Read current batch ID from current_batch.txt"""
        try:
            batch_file = self.base_dir / "current_batch.txt"
            with open(batch_file, "r") as f:
                batch_id = f.read().strip()
            print(f"üìã Current batch ID: {batch_id}")
            return batch_id
        except FileNotFoundError:
            print("‚ùå current_batch.txt not found!")
            return None

    def extract_text_from_pdf(self, pdf_path):
        """Extract text content from PDF file"""
        try:
            text = ""
            with open(pdf_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                for page in pdf_reader.pages:
                    text += page.extract_text() + "\n"
            return text
        except Exception as e:
            print(f"‚ùå Error reading {pdf_path}: {str(e)}")
            return None

    def ask_openai_for_thoi_gian_bao_hanh(self, pdf_content):
        """Ask OpenAI to extract warranty period from CHUONG_III.pdf"""
        prompt = f"""
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i li·ªáu CHUONG III Vi·ªát Nam.

T·ª´ n·ªôi dung t√†i li·ªáu CHUONG III d∆∞·ªõi ƒë√¢y, h√£y t√¨m v√† tr√≠ch xu·∫•t CH√çNH X√ÅC th·ªùi gian b·∫£o h√†nh.

H∆Ø·ªöNG D·∫™N C·ª§ TH·ªÇ:
T√¨m trong b·∫£ng/danh s√°ch c√°c y√™u c·∫ßu c√≥ d√≤ng v·ªÅ:
- "C√≥ cam k·∫øt th·ªùi gian b·∫£o h√†nh"
- "Th·ªùi gian b·∫£o h√†nh" 
- "B·∫£o h√†nh"
- "Warranty"
- ho·∫∑c t·ª´ kh√≥a t∆∞∆°ng t·ª±

Th∆∞·ªùng c√≥ c·∫•u tr√∫c:
```
6.2 | C√≥ cam k·∫øt th·ªùi gian b·∫£o h√†nh ‚â• 12 th√°ng sau khi nghi·ªám thu b√†n giao d·ªãch v·ª• | ƒê√°p ·ª©ng | ƒê·∫°t
```

Y√äU C·∫¶U:
1. CH·ªà tr√≠ch xu·∫•t th·ªùi gian b·∫£o h√†nh (nh∆∞ "12 th√°ng", "1 nƒÉm", "24 th√°ng")
2. LO·∫†I B·ªé t·∫•t c·∫£ k√Ω hi·ªáu to√°n h·ªçc (‚â§, ‚â•, <, >, =)
3. CH·ªà l·∫•y s·ªë v√† ƒë∆°n v·ªã th·ªùi gian
4. KH√îNG l·∫•y ph·∫ßn "sau khi nghi·ªám thu b√†n giao d·ªãch v·ª•"
5. KH√îNG l·∫•y t·ª´ c·ªôt "ƒê·∫°t/Kh√¥ng ƒë·∫°t" ho·∫∑c "ƒê√°p ·ª©ng"
6. Tr·∫£ v·ªÅ CH·ªà th·ªùi gian b·∫£o h√†nh thu·∫ßn t√∫y, kh√¥ng gi·∫£i th√≠ch

V√ç D·ª§:
- N·∫øu th·∫•y "‚â• 12 th√°ng" ‚Üí tr·∫£ v·ªÅ "12 th√°ng"
- N·∫øu th·∫•y "< 1 nƒÉm" ‚Üí tr·∫£ v·ªÅ "1 nƒÉm"

N·ªòI DUNG CHUONG III:
{pdf_content}

TH·ªúI GIAN B·∫¢O H√ÄNH (ch·ªâ s·ªë v√† ƒë∆°n v·ªã):"""

        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "B·∫°n l√† chuy√™n gia tr√≠ch xu·∫•t th·ªùi gian b·∫£o h√†nh t·ª´ t√†i li·ªáu CHUONG III Vi·ªát Nam. Ch·ªâ tr·∫£ v·ªÅ gi√° tr·ªã th·ªùi gian b·∫£o h√†nh."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=100,
                temperature=0.0
            )
            
            extracted_text = response.choices[0].message.content.strip()
            
            # Clean up any extra quotes or formatting
            if extracted_text.startswith('"') and extracted_text.endswith('"'):
                extracted_text = extracted_text[1:-1]
            
            print(f"üéØ OpenAI extracted thoi_gian_bao_hanh: '{extracted_text}'")
            return extracted_text
            
        except Exception as e:
            print(f"‚ùå OpenAI API Error: {str(e)}")
            return "[KH√îNG T√åM TH·∫§Y]"

    def save_to_master_data(self, extracted_content):
        """Save extracted content to master_data.json"""
        master_file = self.extracted_dir / "master_data.json"
        
        # Load existing data or create new
        if master_file.exists():
            with open(master_file, 'r', encoding='utf-8') as f:
                master_data = json.load(f)
        else:
            master_data = {
                "batch_id": self.batch_id,
                "creation_timestamp": datetime.now().isoformat(),
                "placeholders": {},
                "extraction_log": {}
            }
        
        # Add/update thoi_gian_bao_hanh data
        master_data["placeholders"]["thoi_gian_bao_hanh"] = {
            "type": "simple_text",
            "content": extracted_content,
            "extracted_from": "CHUONG_III.pdf",
            "extraction_timestamp": datetime.now().isoformat()
        }
        
        # Update extraction log
        master_data["extraction_log"]["thoi_gian_bao_hanh"] = {
            "status": "success" if extracted_content != "[KH√îNG T√åM TH·∫§Y]" else "failed",
            "timestamp": datetime.now().isoformat(),
            "source_file": "CHUONG_III.pdf"
        }
        
        # Save updated master data
        with open(master_file, 'w', encoding='utf-8') as f:
            json.dump(master_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ Saved to master_data.json: {extracted_content}")
        return master_file

    def extract(self):
        """Main extraction function"""
        print("\nüéØ EXTRACTING: thoi_gian_bao_hanh from CHUONG_III.pdf")
        print("=" * 60)
        
        # Check if CHUONG_III.pdf exists in current batch
        chuong_iii_file = self.pdfs_dir / "CHUONG_III.pdf"
        if not chuong_iii_file.exists():
            print(f"‚ùå File not found: {chuong_iii_file}")
            print(f"üìã Available files: {list(self.pdfs_dir.glob('*.pdf'))}")
            return False
        
        # Extract text from CHUONG_III.pdf
        print("üìñ Reading CHUONG_III.pdf...")
        chuong_iii_content = self.extract_text_from_pdf(chuong_iii_file)
        if not chuong_iii_content:
            return False
        
        print(f"‚úÖ Extracted {len(chuong_iii_content)} characters from CHUONG_III.pdf")
        
        # Ask OpenAI to extract thoi_gian_bao_hanh
        print("ü§ñ Asking OpenAI to extract warranty period...")
        thoi_gian_bao_hanh = self.ask_openai_for_thoi_gian_bao_hanh(chuong_iii_content)
        
        print(f"üìù Extracted warranty period: {thoi_gian_bao_hanh}")
        
        # Save to master data
        master_file = self.save_to_master_data(thoi_gian_bao_hanh)
        
        print(f"‚úÖ SUCCESS: thoi_gian_bao_hanh extracted and saved!")
        return True

    def save_extraction_failure(self, error_message):
        """Save extraction failure to master_data.json"""
        master_file = self.extracted_dir / "master_data.json"
        
        # Load existing data or create new
        if master_file.exists():
            with open(master_file, 'r', encoding='utf-8') as f:
                master_data = json.load(f)
        else:
            master_data = {
                "batch_id": self.batch_id,
                "creation_timestamp": datetime.now().isoformat(),
                "placeholders": {},
                "extraction_log": {}
            }
        
        # Log the failure
        master_data["extraction_log"]["thoi_gian_bao_hanh"] = {
            "status": "failed",
            "error": error_message,
            "timestamp": datetime.now().isoformat(),
            "source_file": "CHUONG_III.pdf"
        }
        
        # Save updated master data
        with open(master_file, 'w', encoding='utf-8') as f:
            json.dump(master_data, f, ensure_ascii=False, indent=2)

def main():
    print("üáªüá≥ Thoi Gian Bao Hanh Extractor - Warranty Period Extraction")
    print("=" * 70)
    
    try:
        # Initialize extractor
        extractor = ThoiGianBaoHanhExtractor()
        print("‚úÖ Extractor initialized successfully")
        
        # Extract thoi_gian_bao_hanh
        success = extractor.extract()
        
        if success:
            print("\nüéâ Extraction completed successfully!")
        else:
            print("\n‚ùå Extraction failed!")
            
    except ValueError as e:
        print(e)
        print("üí° Please ensure .env file exists with OPENAI_API_KEY")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()