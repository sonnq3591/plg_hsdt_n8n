#!/usr/bin/env python3
"""
23_BUOC_KH_NHAN_SU.py - Generate 23-step personnel plan bar chart
Uses timeline data + fixed personnel columns from image
"""

import pandas as pd
import matplotlib.pyplot as plt
import os
import json
from pathlib import Path
from io import StringIO

def read_batch_id():
    """Read current batch ID"""
    try:
        base_dir = Path(__file__).parent.parent
        batch_file = base_dir / "current_batch.txt"
        with open(batch_file, "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        print("‚ùå current_batch.txt not found!")
        return None

def load_extracted_time():
    """Load thoi_gian_hoan_thanh from extracted data"""
    batch_id = read_batch_id()
    if not batch_id:
        return "120 ng√†y"  # Default fallback
    
    base_dir = Path(__file__).parent.parent
    master_file = base_dir / batch_id / "extracted_data" / "master_data.json"
    
    try:
        with open(master_file, 'r', encoding='utf-8') as f:
            master_data = json.load(f)
        
        placeholders = master_data.get("placeholders", {})
        time_data = placeholders.get("thoi_gian_hoan_thanh", {})
        content = time_data.get("content", "120 ng√†y")
        
        print(f"üìä Extracted time: {content}")
        return content
        
    except Exception as e:
        print(f"‚ö†Ô∏è Could not load extracted time: {e}")
        return "120 ng√†y"  # Default fallback

def extract_days_from_time(time_str):
    """Extract number of days from time string"""
    import re
    numbers = re.findall(r'\d+', time_str)
    if numbers:
        return int(numbers[0])
    return 120  # Default fallback

def generate_23_buoc_nhan_su():
    """Generate the 23-step personnel plan bar chart with timeline data + fixed personnel"""
    
    # Get extracted time and calculate scaling
    extracted_time = load_extracted_time()
    target_days = extract_days_from_time(extracted_time)
    
    print(f"üéØ Target total days: {target_days}")
    
    # STEP 1: Timeline data (from 23-step process)
    timeline_csv = """Task,Base_Days
Giao nh·∫≠n t√†i li·ªáu v√† l·∫≠p bi√™n b·∫£n giao nh·∫≠n t√†i li·ªáu,0.5
V·∫≠n chuy·ªÉn t√†i li·ªáu t·ª´ kho b·∫£o qu·∫£n ƒë·∫øn ƒë·ªãa ƒëi·ªÉm ch·ªânh l√Ω,1
V·ªá sinh s∆° b·ªô t√†i li·ªáu,1
Kh·∫£o s√°t v√† bi√™n so·∫°n c√°c vƒÉn b·∫£n h∆∞·ªõng d·∫´n ch·ªânh l√Ω,1
Ph√¢n lo·∫°i t√†i li·ªáu theo H∆∞·ªõng d·∫´n ph√¢n lo·∫°i,20
L·∫≠p h·ªì s∆° ho·∫∑c ch·ªânh s·ª≠a ho√†n thi·ªán h·ªì s∆° theo H∆∞·ªõng d·∫´n l·∫≠p h·ªì s∆°,30
Vi·∫øt c√°c tr∆∞·ªùng th√¥ng tin v√†o phi·∫øu tin,2
Ki·ªÉm tra ch·ªânh s·ª≠a h·ªì s∆° v√† phi·∫øu tin,1
H·ªá th·ªëng h√≥a phi·∫øu tin theo ph∆∞∆°ng √°n ph√¢n lo·∫°i,1
H·ªá th·ªëng h√≥a h·ªì s∆° theo phi·∫øu tin,1
Bi√™n m·ª•c h·ªì s∆°,15
Ki·ªÉm tra v√† ch·ªânh s·ª≠a vi·ªác bi√™n m·ª•c h·ªì s∆°,1
Ghi s·ªë h·ªì s∆° ch√≠nh th·ª©c v√†o phi·∫øu tin v√† l√™n b√¨a h·ªì s∆°,6
V·ªá sinh t√†i li·ªáu th√°o b·ªè ghim k·∫πp l√†m ph·∫≥ng v√† ƒë∆∞a t√†i li·ªáu v√†o b√¨a h·ªì s∆°,1
ƒê∆∞a h·ªì s∆° v√†o h·ªôp c·∫∑p,2
Vi·∫øt in v√† d√°n nh√£n h·ªôp c·∫∑p,2
V·∫≠n chuy·ªÉn t√†i li·ªáu v√†o kho v√† x·∫øp l√™n gi√°,1
Giao nh·∫≠n t√†i li·ªáu sau ch·ªânh l√Ω v√† l·∫≠p Bi√™n b·∫£n giao nh·∫≠n t√†i li·ªáu,1
Nh·∫≠p phi·∫øu tin v√†o c∆° s·ªü d·ªØ li·ªáu,5
Ki·ªÉm tra ch·ªânh s·ª≠a vi·ªác nh·∫≠p phi·∫øu tin,1
L·∫≠p m·ª•c l·ª•c h·ªì s∆°,4
Th·ªëng k√™ b√≥ g√≥i l·∫≠p danh m·ª•c v√† vi·∫øt thuy·∫øt minh t√†i li·ªáu lo·∫°i,1
K·∫øt th√∫c ch·ªânh l√Ω,1"""
    
    # STEP 2: Personnel data (FIXED, from your image)
    personnel_csv = """Task,Qu·∫£n l√Ω d·ª± √°n,Tr∆∞·ªüng nh√≥m ch·ªânh l√Ω,Nh√¢n s·ª± ch·ªânh l√Ω
Giao nh·∫≠n t√†i li·ªáu v√† l·∫≠p bi√™n b·∫£n giao nh·∫≠n t√†i li·ªáu,1,1,5
V·∫≠n chuy·ªÉn t√†i li·ªáu t·ª´ kho b·∫£o qu·∫£n ƒë·∫øn ƒë·ªãa ƒëi·ªÉm ch·ªânh l√Ω,1,1,10
V·ªá sinh s∆° b·ªô t√†i li·ªáu,1,1,10
Kh·∫£o s√°t v√† bi√™n so·∫°n c√°c vƒÉn b·∫£n h∆∞·ªõng d·∫´n ch·ªânh l√Ω,1,1,2
Ph√¢n lo·∫°i t√†i li·ªáu theo H∆∞·ªõng d·∫´n ph√¢n lo·∫°i,1,1,10
L·∫≠p h·ªì s∆° ho·∫∑c ch·ªânh s·ª≠a ho√†n thi·ªán h·ªì s∆° theo H∆∞·ªõng d·∫´n l·∫≠p h·ªì s∆°,1,1,10
Vi·∫øt c√°c tr∆∞·ªùng th√¥ng tin v√†o phi·∫øu tin,1,1,10
Ki·ªÉm tra ch·ªânh s·ª≠a h·ªì s∆° v√† phi·∫øu tin,1,1,2
H·ªá th·ªëng h√≥a phi·∫øu tin theo ph∆∞∆°ng √°n ph√¢n lo·∫°i,1,1,10
H·ªá th·ªëng h√≥a h·ªì s∆° theo phi·∫øu tin,1,1,10
Bi√™n m·ª•c h·ªì s∆°,1,1,10
Ki·ªÉm tra v√† ch·ªânh s·ª≠a vi·ªác bi√™n m·ª•c h·ªì s∆°,1,1,2
Ghi s·ªë h·ªì s∆° ch√≠nh th·ª©c v√†o phi·∫øu tin v√† l√™n b√¨a h·ªì s∆°,1,1,10
V·ªá sinh t√†i li·ªáu th√°o b·ªè ghim k·∫πp l√†m ph·∫≥ng v√† ƒë∆∞a t√†i li·ªáu v√†o b√¨a h·ªì s∆°,1,1,10
ƒê∆∞a h·ªì s∆° v√†o h·ªôp c·∫∑p,1,1,10
Vi·∫øt in v√† d√°n nh√£n h·ªôp c·∫∑p,1,1,10
V·∫≠n chuy·ªÉn t√†i li·ªáu v√†o kho v√† x·∫øp l√™n gi√°,1,1,10
Giao nh·∫≠n t√†i li·ªáu sau ch·ªânh l√Ω v√† l·∫≠p Bi√™n b·∫£n giao nh·∫≠n t√†i li·ªáu,1,1,2
Nh·∫≠p phi·∫øu tin v√†o c∆° s·ªü d·ªØ li·ªáu,1,1,10
Ki·ªÉm tra ch·ªânh s·ª≠a vi·ªác nh·∫≠p phi·∫øu tin,1,1,2
L·∫≠p m·ª•c l·ª•c h·ªì s∆°,1,1,10
Th·ªëng k√™ b√≥ g√≥i l·∫≠p danh m·ª•c v√† vi·∫øt thuy·∫øt minh t√†i li·ªáu lo·∫°i,1,1,10
K·∫øt th√∫c ch·ªânh l√Ω,1,1,2"""
    
    # Load timeline data
    timeline_df = pd.read_csv(StringIO(timeline_csv))
    timeline_df.set_index('Task', inplace=True)
    
    # Load personnel data
    personnel_df = pd.read_csv(StringIO(personnel_csv))
    personnel_df.set_index('Task', inplace=True)
    
    # Calculate scaling for timeline
    base_total = timeline_df['Base_Days'].sum()  # Should be 100
    scaling_ratio = target_days / base_total
    print(f"üìä Base total: {base_total} days")
    print(f"üìä Scaling ratio: {scaling_ratio:.3f}")
    
    # Apply scaling to timeline
    timeline_df['Ng√†y th·ª±c hi·ªán'] = (timeline_df['Base_Days'] * scaling_ratio).apply(lambda x: max(1, round(x)))
    scaled_total = timeline_df['Ng√†y th·ª±c hi·ªán'].sum()
    print(f"üìä Scaled total: {scaled_total} days")
    
    # Combine timeline + personnel data
    df = pd.concat([timeline_df[['Ng√†y th·ª±c hi·ªán']], personnel_df], axis=1)
    
    # Reorder columns to put "Ng√†y th·ª±c hi·ªán" first
    column_order = ['Ng√†y th·ª±c hi·ªán', 'Qu·∫£n l√Ω d·ª± √°n', 'Tr∆∞·ªüng nh√≥m ch·ªânh l√Ω', 'Nh√¢n s·ª± ch·ªânh l√Ω']
    df = df[column_order]

    # Wrap labels every 2 words for tighter text blocks
    def wrap_text(text, words_per_line=2):
        words = text.split()
        return '\n'.join([' '.join(words[i:i+words_per_line]) for i in range(0, len(words), words_per_line)])

    wrapped_labels = [wrap_text(task, 2) for task in df.index]

    # Dynamically calculate bottom margin based on max label height
    max_lines = max(label.count('\n') + 1 for label in wrapped_labels)
    bottom_margin = 0.3 + 0.02 * max_lines  # Tune scaling factor as needed

    # Create figure with dynamic height based on number of label lines
    fig_height = 12 + 0.5 * max_lines  # Increase base height if needed
    fig, ax = plt.subplots(figsize=(26, fig_height))

    bar_plot = df.plot(kind='bar', ax=ax, width=0.55)

    # Apply improved x-axis labels
    ax.set_xticklabels(wrapped_labels, rotation=0, ha='center', fontsize=11)

    # Add data labels
    for container in ax.containers:
        for bar in container:
            height = bar.get_height()
            if height > 0:
                ax.annotate(f'{int(height)}',
                            xy=(bar.get_x() + bar.get_width() / 2, height),
                            xytext=(0, 3),
                            textcoords="offset points",
                            ha='center', va='bottom', fontsize=10)

    # Labels, legend, and layout
    ax.set_title('K·∫æ HO·∫†CH NH√ÇN S·ª∞ (23 B∆Ø·ªöC)', fontsize=20)
    ax.set_ylabel('Ng√†y/Nh√¢n s·ª±', fontsize=16)
    ax.set_xlabel('', fontsize=16)
    
    # Move legend to top right
    ax.legend(title='Nh√≥m nh√¢n s·ª±', fontsize=12, loc='upper right')
    ax.yaxis.grid(True, linestyle='--', alpha=0.6)

    # Add table below the plot (no column headers)
    table_data = df.T.values
    row_labels = df.columns.tolist()

    table = plt.table(cellText=table_data,
                      rowLabels=row_labels,
                      # colLabels removed to hide column headers
                      cellLoc='center',
                      rowLoc='center',
                      loc='bottom',
                      bbox=[0.0, -bottom_margin * 0.88, 1.0, 0.2])  # Adjust as needed

    table.auto_set_font_size(False)
    table.set_fontsize(10)

    plt.subplots_adjust(left=0.05, right=0.98, top=0.93, bottom=bottom_margin)
    
    # Save to pictures folder
    batch_id = read_batch_id()
    if batch_id:
        base_dir = Path(__file__).parent.parent
        pictures_dir = base_dir / batch_id / "pictures"
        pictures_dir.mkdir(exist_ok=True)
        
        output_file = pictures_dir / "23_BUOC_KH_NHAN_SU.png"
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"üíæ Personnel chart saved: {output_file}")
    else:
        # Fallback to current directory
        plt.savefig("23_BUOC_KH_NHAN_SU.png", dpi=300, bbox_inches='tight')
        print("üíæ Personnel chart saved: 23_BUOC_KH_NHAN_SU.png")
    
    plt.show()

def main():
    print("üë• 23-Step Personnel Plan Generator")
    print("=" * 50)
    
    try:
        generate_23_buoc_nhan_su()
        print("\nüéâ Personnel plan generation completed!")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()