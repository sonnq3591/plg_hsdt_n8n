#!/usr/bin/env python3
"""
21_BUOC_KH_THUC_HIEN.py - Generate timeline graph with exact format
Uses extracted thoi_gian_hoan_thanh data and applies ratio scaling
"""

import matplotlib.pyplot as plt
import pandas as pd
import textwrap
import os
import json
from pathlib import Path

def read_batch_id():
    """Read current batch ID"""
    try:
        base_dir = Path(__file__).parent.parent
        batch_file = base_dir / "current_batch.txt"
        with open(batch_file, "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        print("‚ùå current_batch.txt not found!")
        return None

def load_extracted_time():
    """Load thoi_gian_hoan_thanh from extracted data"""
    batch_id = read_batch_id()
    if not batch_id:
        return "120 ng√†y"  # Default fallback
    
    base_dir = Path(__file__).parent.parent
    master_file = base_dir / batch_id / "extracted_data" / "master_data.json"
    
    try:
        with open(master_file, 'r', encoding='utf-8') as f:
            master_data = json.load(f)
        
        placeholders = master_data.get("placeholders", {})
        time_data = placeholders.get("thoi_gian_hoan_thanh", {})
        content = time_data.get("content", "120 ng√†y")
        
        print(f"üìä Extracted time: {content}")
        return content
        
    except Exception as e:
        print(f"‚ö†Ô∏è Could not load extracted time: {e}")
        return "120 ng√†y"  # Default fallback

def extract_days_from_time(time_str):
    """Extract number of days from time string"""
    # Handle formats like "120 ng√†y", "120ng√†y", "120 days", etc.
    import re
    numbers = re.findall(r'\d+', time_str)
    if numbers:
        return int(numbers[0])
    return 120  # Default fallback

def generate_21_buoc_graph():
    """Generate the 21-step timeline graph"""
    
    # Get extracted time and calculate scaling
    extracted_time = load_extracted_time()
    target_days = extract_days_from_time(extracted_time)
    
    print(f"üéØ Target total days: {target_days}")
    
    # Hardcoded CSV data from the image (base ratios sum to 100)
    csv_data = """STT,BUOC,S·ªë ng√†y
    1,Giao nh·∫≠n t√†i li·ªáu v√† l·∫≠p bi√™n b·∫£n giao nh·∫≠n t√†i li·ªáu,1
    2,V·∫≠n chuy·ªÉn t√†i li·ªáu t·ª´ kho b·∫£o qu·∫£n ƒë·∫øn ƒë·ªãa ƒëi·ªÉm ch·ªânh l√Ω (~100m),1
    3,V·ªá sinh s∆° b·ªô t√†i li·ªáu,1
    4,Kh·∫£o s√°t v√† bi√™n so·∫°n c√°c vƒÉn b·∫£n h∆∞·ªõng d·∫´n ch·ªânh l√Ω,1
    5,Ph√¢n lo·∫°i t√†i li·ªáu theo H∆∞·ªõng d·∫´n ph√¢n lo·∫°i,20
    6,L·∫≠p h·ªì s∆° ho·∫∑c ch·ªânh s·ª≠a ho√†n thi·ªán h·ªì s∆° theo H∆∞·ªõng d·∫´n l·∫≠p h·ªì s∆°,30
    7,Vi·∫øt c√°c tr∆∞·ªùng th√¥ng tin v√†o phi·∫øu tin,3
    8,Ki·ªÉm tra ch·ªânh s·ª≠a h·ªì s∆° v√† phi·∫øu tin,1
    9,H·ªá th·ªëng h√≥a phi·∫øu tin theo ph∆∞∆°ng √°n ph√¢n lo·∫°i,1
    10,H·ªá th·ªëng h√≥a h·ªì s∆° theo phi·∫øu tin,1
    11,Bi√™n m·ª•c h·ªì s∆°,15
    12,Ki·ªÉm tra v√† ch·ªânh s·ª≠a vi·ªác bi√™n m·ª•c h·ªì s∆°,1
    13,Ghi s·ªë h·ªì s∆° ch√≠nh th·ª©c v√†o phi·∫øu tin v√† l√™n b√¨a h·ªì s∆°,7
    14,V·ªá sinh t√†i li·ªáu th√°o b·ªè ghim k·∫πp l√†m ph·∫≥ng v√† ƒë∆∞a t√†i li·ªáu v√†o b√¨a h·ªì s∆°,2
    15,ƒê∆∞a h·ªì s∆° v√†o h·ªôp (c·∫∑p),3
    16,Vi·∫øt/in v√† d√°n nh√£n h·ªôp (c·∫∑p),3
    17,V·∫≠n chuy·ªÉn t√†i li·ªáu v√†o kho v√† x·∫øp l√™n gi√°,1
    18,Ki·ªÉm tra ch·ªânh s·ª≠a vi·ªác bi√™n phi·∫øu tin,1
    19,L·∫≠p m·ª•c l·ª•c h·ªì s∆°,5
    20,Th·ªëng k√™ b√≥ g√≥i l·∫≠p danh m·ª•c v√† vi·∫øt thuy·∫øt minh t√†i li·ªáu lo·∫°i,1
    21,K·∫øt th√∫c ch·ªânh l√Ω,1"""
    
    # Convert to DataFrame
    from io import StringIO
    df = pd.read_csv(StringIO(csv_data))
    
    # Calculate scaling ratio
    base_total = df['S·ªë ng√†y'].sum()  # Should be 100
    scaling_ratio = target_days / base_total
    
    print(f"üìä Base total: {base_total} days")
    print(f"üìä Scaling ratio: {scaling_ratio:.3f}")
    
    # Apply scaling and round up
    df['Days_Scaled'] = (df['S·ªë ng√†y'] * scaling_ratio).apply(lambda x: max(1, round(x)))
    
    # Verify total
    scaled_total = df['Days_Scaled'].sum()
    print(f"üìä Scaled total: {scaled_total} days")
    
    # Wrap task names every 2 words
    def wrap_text(text, words_per_line=2):
        words = text.split()
        return '\n'.join([' '.join(words[i:i+words_per_line]) for i in range(0, len(words), words_per_line)])

    wrapped_labels = [wrap_text(task, 2) for task in df["BUOC"]]

    # Calculate layout adjustments
    max_lines = max(label.count('\n') + 1 for label in wrapped_labels)
    bottom_margin = 0.3 + 0.02 * max_lines
    fig_height = 12 + 0.5 * max_lines

    # Create figure
    fig, ax = plt.subplots(figsize=(26, fig_height))

    # Line plot using regular x positions
    x = df.index
    ax.plot(x, df['Days_Scaled'], marker='o', color='red', linestyle='-')
    ax.set_title("K·∫æ HO·∫†CH TH·ª∞C HI·ªÜN C√îNG VI·ªÜC", fontsize=20, pad=25)
    ax.set_ylabel("S·ªë ng√†y", fontsize=16)
    ax.set_xticks(x)
    ax.set_xticklabels(wrapped_labels, rotation=0, ha='center', fontsize=11.5)
    ax.grid(True, axis='y', linestyle='--', alpha=0.6)

    # Annotate data points
    for i, y in enumerate(df['Days_Scaled']):
        ax.annotate(str(y), (x[i], y), textcoords="offset points", xytext=(0, 10), va='bottom', ha='left', fontsize=12)

    plt.subplots_adjust(left=0.05, right=0.98, top=0.93, bottom=bottom_margin)
    
    # Save to pictures folder
    batch_id = read_batch_id()
    if batch_id:
        base_dir = Path(__file__).parent.parent
        pictures_dir = base_dir / batch_id / "pictures"
        pictures_dir.mkdir(exist_ok=True)
        
        output_file = pictures_dir / "21_BUOC_KH_THUC_HIEN.png"
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"üíæ Graph saved: {output_file}")
    else:
        # Fallback to current directory
        plt.savefig("21_BUOC_KH_THUC_HIEN.png", dpi=300, bbox_inches='tight')
        print("üíæ Graph saved: 21_BUOC_KH_THUC_HIEN.png")
    
    plt.show()

def main():
    print("üìä 21-Step Timeline Graph Generator")
    print("=" * 50)
    
    try:
        generate_21_buoc_graph()
        print("\nüéâ Graph generation completed!")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()